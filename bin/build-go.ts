// This file is used to extract the attributes of link and script tag
// from the index.html generated by ng build.
// The attributes are rebuilt to two separate files containg the HTML
// link and script tags, with appropriate modifications made such as
// chaning the default resource url.
// These files are then copies to server's views directory so that they
// could be included in server-side template engine.


import { resolve } from 'path';
import { promises, link } from 'fs';
import render from './lib/render';
import { Assets, parse } from './lib/parser';
import { HTMLTag } from './lib/html-tag';


const { writeFile } = promises;

const pathPrefix = '/static/';
// The index.html generated by ng build.
const inputFile = resolve(process.cwd(), 'dist/superyard-client/index.html');
const outDir = resolve(process.cwd(), 'dist');

async function build(assets: Assets): Promise<void> {

  // Build HTML links elememt
  const links = assets.styles.map(attrs => {
    return (new HTMLTag('link'))
      .withPathPrefix(pathPrefix)
      .withSelfClosing()
      .withAttributes(attrs)
      .render();
  })
  .join('');

  // Build HTML script element
  const scripts = assets.scripts.map(attrs => {
    return (new HTMLTag('script'))
      .withPathPrefix(pathPrefix)
      .withAttributes(attrs)
      .render();
  })
  .join('');


  const rendered = await render('index.html', {
    iconUrl: 'http://interactive.ftchinese.com/favicons',
    styles: link,
    scripts,
  });

  const goTmpl = await render('index.go', {
    content: rendered,
  });

  await writeFile(`${outDir}/home.go`, goTmpl, { encoding: 'utf8 '});
}

parse(inputFile)
  .then(assets => {
    build(assets);
  })
  .catch(err => console.log(err));
