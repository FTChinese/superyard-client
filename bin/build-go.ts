import { resolve } from 'path';
import { promises } from 'fs';
import render from './lib/render';
import { Assets, parse } from './lib/parser';
import { HTMLTag } from './lib/html-tag';
import { JSDOM } from 'jsdom';

const { writeFile } = promises;

interface CtxIndex {
  iconUrl: string;
  styles: string; // HTML link tags
  scripts: string; // HTML script tags.
}

interface CtxGoVar {
  content: string;
}

const pathPrefix = '/static/';
// The index.html generated by ng build.
const inputFile = resolve(process.cwd(), 'dist/superyard-client/index.html');
const outDir = resolve(process.cwd(), 'dist');

// Modify url in place.
async function modifyAssetsUrl(fileName: string): Promise<string> {
  const dom = await JSDOM.fromFile(fileName);

  const document = dom.window.document;

  document.querySelectorAll('link')
    .forEach(linkEl => {
      const href = linkEl.getAttribute('href');
      if (href.startsWith('https')) {
        return;
      }

      if (href.startsWith('favicon')) {
        return;
      }

      linkEl.setAttribute('href', `/static/${href}`);
    });

  document.querySelectorAll('script')
    .forEach(scriptEl => {
      const src = scriptEl.getAttribute('src');
      scriptEl.setAttribute('src', `/static/${src}`);
    });

  return dom.serialize();
}

async function build(assets: Assets): Promise<void> {

  // Build HTML links elememt
  const styles = assets.styles.map(attrs => {
    return (new HTMLTag('link'))
      .withPathPrefix(pathPrefix)
      .withSelfClosing()
      .withAttributes(attrs)
      .render();
  })
  .join('');

  // Build HTML script element
  const scripts = assets.scripts.map(attrs => {
    return (new HTMLTag('script'))
      .withPathPrefix(pathPrefix)
      .withAttributes(attrs)
      .render();
  })
  .join('');


  const ctxIndex: CtxIndex = {
    iconUrl: 'http://interactive.ftchinese.com/favicons',
    styles,
    scripts,
  }

  const rendered = await render('index.html', ctxIndex);

  const ctxGoVar: CtxGoVar = {
    content: rendered,
  }

  const goTmpl = await render('index.go', ctxGoVar);

  await writeFile(`${outDir}/home.go`, goTmpl, { encoding: 'utf8' });
}

parse(inputFile)
  .then(assets => {
    build(assets);
  })
  .catch(err => console.log(err));

